name: SonarQube
on:
  push:
    branches:
      - develop
  pull_request:
jobs:
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up Docker Compose
        uses: ndeloof/install-compose-action@v0.0.1
        with:
          version: v2.10.2

      - name: Create environment file
        run: |
          mkdir -p backend/dotenv_files
          echo "DEBUG=1" > backend/dotenv_files/.env
          echo "SECRET_KEY=github-actions-test-key" >> backend/dotenv_files/.env
          echo "ALLOWED_HOSTS=*" >> backend/dotenv_files/.env
          echo "POSTGRES_ENGINE=django.db.backends.postgresql" >> backend/dotenv_files/.env
          echo "POSTGRES_DB=postgres" >> backend/dotenv_files/.env
          echo "POSTGRES_USER=postgres" >> backend/dotenv_files/.env
          echo "POSTGRES_PASSWORD=postgres" >> backend/dotenv_files/.env
          echo "POSTGRES_HOST=db" >> backend/dotenv_files/.env
          echo "POSTGRES_PORT=5432" >> backend/dotenv_files/.env

      # Create a compliant coverage configuration
      - name: Create .coveragerc
        run: |
          cat > backend/.coveragerc << EOF
          [run]
          source = .
          omit = */migrations/*,*/tests.py,*/tests/*,*/admin.py
          relative_files = True
          branch = True

          [report]
          exclude_lines = 
              pragma: no cover
              def __repr__
          EOF

      # Start the backend service
      - name: Start backend for testing
        run: |
          # Update the docker-compose.yml file to add memory limits
          cat > docker-compose.override.yml << EOF
          version: '3'
          services:
            backend:
              mem_limit: 4g
          EOF

          # Start the backend service
          docker-compose up -d backend
          docker-compose ps

      # Run tests with coverage - make this match the documentation example
      - name: Run tests with coverage
        run: |
          # Create persistent coverage output directory
          mkdir -p .coverage-reports

          # Run coverage in one step, similar to the docs example
          docker-compose exec -T backend bash -c "cd /code && coverage run manage.py test && coverage xml -o coverage.xml"

          # Copy the report to the expected location
          docker cp $(docker-compose ps -q backend):/code/coverage.xml .coverage-reports/

      # Use more standardized SonarQube properties
      - name: Create sonar-project.properties
        run: |
          cat > sonar-project.properties << EOF
          sonar.projectKey=Gustavo-Jun-Tsuji_mc656-project-2025
          sonar.organization=unjun-organization

          # Source code information
          sonar.sources=backend
          sonar.exclusions=**/migrations/**,**/__pycache__/**,**/tests/**

          # Tests configuration
          sonar.tests=backend
          sonar.test.inclusions=**/tests.py,**/tests/**/*.py

          # Coverage report path - use standard location from docs
          sonar.python.coverage.reportPaths=.coverage-reports/coverage.xml

          # Additional settings
          sonar.verbose=true
          sonar.branch.name=develop
          sonar.sourceEncoding=UTF-8
          EOF

      - name: Debug coverage report
        run: |
          echo "=== Coverage Report Structure ==="
          if [ -f .coverage-reports/coverage.xml ]; then
            echo "Coverage file exists!"
            grep -A 3 "<source>" .coverage-reports/coverage.xml
            grep -A 10 "<class " .coverage-reports/coverage.xml | head -20
            echo "=== File paths in coverage report ==="
            grep "filename=" .coverage-reports/coverage.xml | head -10
          else
            echo "Coverage file not found!"
          fi

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
